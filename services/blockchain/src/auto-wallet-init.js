/**
 * Enhanced Container Wallet Initialization
 * Automatically handles wallet creation and secret management for web2 users
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { Wallet } = require('@ethersproject/wallet');
const secp256k1 = require('secp256k1');
const { blake2bHex } = require('blakejs');

class AutoWalletManager {
    constructor() {
        this.configDir = process.env.WALLET_CONFIG_DIR || '/app/data/config';
        this.walletDir = process.env.WALLET_DIR || '/app/data/wallets';
        this.defaultWalletPath = path.join(this.configDir, 'default-wallet.json');
        this.secretsPath = path.join(this.configDir, 'auto-secrets.json');
        this.network = process.env.FILECOIN_NETWORK || 'calibration';
        
        // Ensure directories exist
        this.ensureDirectories();
    }

    ensureDirectories() {
        [this.configDir, this.walletDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`📁 Created directory: ${dir}`);
            }
        });
    }

    /**
     * Generate or load encryption secrets
     */
    getEncryptionSecrets() {
        // First check environment variables
        const envSecret = process.env.WALLET_ENCRYPTION_KEY;
        if (envSecret && envSecret.length >= 32 && !envSecret.includes('your_')) {
            return {
                walletKey: envSecret,
                source: 'environment'
            };
        }

        // Check if auto-generated secrets exist
        if (fs.existsSync(this.secretsPath)) {
            try {
                const secrets = JSON.parse(fs.readFileSync(this.secretsPath, 'utf8'));
                console.log('🔐 Using existing auto-generated secrets');
                return {
                    walletKey: secrets.walletEncryptionKey,
                    source: 'auto-generated'
                };
            } catch (error) {
                console.log('⚠️  Failed to read auto-secrets, generating new ones');
            }
        }

        // Generate new secrets automatically
        console.log('🔐 Generating new wallet encryption secrets...');
        const walletKey = crypto.randomBytes(32).toString('hex');
        
        const secrets = {
            walletEncryptionKey: walletKey,
            generatedAt: new Date().toISOString(),
            purpose: 'auto-generated-wallet-encryption'
        };

        fs.writeFileSync(this.secretsPath, JSON.stringify(secrets, null, 2));
        console.log('✅ Auto-generated wallet encryption secrets');
        
        return {
            walletKey,
            source: 'newly-generated'
        };
    }

    /**
     * Generate a new Filecoin wallet
     */
    async generateWallet() {
        try {
            console.log('🔑 Generating new Filecoin wallet...');
            
            // Generate private key
            let privateKey;
            do {
                privateKey = crypto.randomBytes(32);
            } while (!secp256k1.privateKeyVerify(privateKey));

            // Generate public key and address
            const publicKey = secp256k1.publicKeyCreate(privateKey, false);
            const uncompressedPublicKey = secp256k1.publicKeyConvert(publicKey, false);
            
            // Create Filecoin address (f1 for secp256k1)
            const pubkeyHash = blake2bHex(uncompressedPublicKey.slice(1), undefined, 20);
            const address = this.encodeFilecoinAddress(1, Buffer.from(pubkeyHash, 'hex'));

            const wallet = {
                id: crypto.randomUUID(),
                address: address,
                network: this.network,
                type: 'secp256k1',
                createdAt: new Date().toISOString(),
                balance: 0,
                isFunded: false,
                autoGenerated: true
            };

            // Encrypt and store private key
            const secrets = this.getEncryptionSecrets();
            const encryptedPrivateKey = this.encryptPrivateKey(
                privateKey.toString('hex'),
                secrets.walletKey
            );

            const walletData = {
                ...wallet,
                encryptedPrivateKey,
                encryptionMethod: 'aes-256-gcm'
            };

            // Save wallet
            const walletPath = path.join(this.walletDir, `${wallet.id}.json`);
            fs.writeFileSync(walletPath, JSON.stringify(walletData, null, 2));

            // Update default wallet reference
            fs.writeFileSync(this.defaultWalletPath, JSON.stringify({
                defaultWalletId: wallet.id,
                address: wallet.address,
                network: wallet.network,
                lastUpdated: new Date().toISOString(),
                autoGenerated: true
            }, null, 2));

            console.log(`✅ Generated new wallet: ${address}`);
            console.log(`🌍 Network: ${this.network}`);
            console.log(`🔐 Encryption: ${secrets.source}`);

            return wallet;

        } catch (error) {
            console.error('❌ Failed to generate wallet:', error);
            throw error;
        }
    }

    /**
     * Encrypt private key with AES-256-GCM
     */
    encryptPrivateKey(privateKey, encryptionKey) {
        const algorithm = 'aes-256-gcm';
        const iv = crypto.randomBytes(16);
        const key = Buffer.from(encryptionKey, 'hex');
        
        const cipher = crypto.createCipher(algorithm, key);
        let encrypted = cipher.update(privateKey, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        
        const authTag = cipher.getAuthTag();
        
        return {
            encrypted,
            iv: iv.toString('hex'),
            authTag: authTag.toString('hex'),
            algorithm
        };
    }

    /**
     * Encode Filecoin address
     */
    encodeFilecoinAddress(protocol, payload) {
        // Simplified Filecoin address encoding
        const protocolByte = Buffer.from([protocol]);
        const combined = Buffer.concat([protocolByte, payload]);
        
        // For demo purposes - in production use proper Filecoin address encoding
        const checksum = this.calculateChecksum(combined);
        const address = `f${protocol}${payload.toString('hex')}${checksum}`;
        
        return address.substring(0, 41); // Standard Filecoin address length
    }

    /**
     * Calculate address checksum
     */
    calculateChecksum(data) {
        const hash = crypto.createHash('sha256').update(data).digest();
        return hash.toString('hex').substring(0, 8);
    }

    /**
     * Check if wallet exists and is valid
     */
    async checkExistingWallet() {
        if (!fs.existsSync(this.defaultWalletPath)) {
            return null;
        }

        try {
            const defaultConfig = JSON.parse(fs.readFileSync(this.defaultWalletPath, 'utf8'));
            const walletPath = path.join(this.walletDir, `${defaultConfig.defaultWalletId}.json`);
            
            if (fs.existsSync(walletPath)) {
                const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
                console.log(`📱 Found existing wallet: ${walletData.address}`);
                return walletData;
            }
        } catch (error) {
            console.log('⚠️  Invalid existing wallet configuration');
        }

        return null;
    }

    /**
     * Initialize wallet (main entry point)
     */
    async initializeWallet() {
        console.log('🔍 Checking for existing wallet...');
        
        const existingWallet = await this.checkExistingWallet();
        if (existingWallet) {
            console.log('✅ Using existing wallet');
            return existingWallet;
        }

        console.log('🆕 No wallet found, generating new one...');
        const newWallet = await this.generateWallet();
        
        // Auto-fund on testnet
        if (this.network === 'calibration') {
            console.log('💰 Attempting auto-funding from testnet faucet...');
            setTimeout(() => this.attemptAutoFunding(newWallet.address), 5000);
        } else {
            console.log('💰 Mainnet wallet created - manual funding required');
            console.log(`📋 Send FIL to: ${newWallet.address}`);
        }

        return newWallet;
    }

    /**
     * Attempt to auto-fund wallet from testnet faucet
     */
    async attemptAutoFunding(address) {
        const faucets = [
            'https://faucet.calibnet.chainsafe-fil.io/',
            'https://beryx.zondax.ch/faucet/',
        ];

        console.log(`💧 Requesting testnet funds for: ${address}`);
        
        for (const faucet of faucets) {
            try {
                // In a real implementation, you'd make HTTP requests to faucets
                console.log(`🌊 Trying faucet: ${faucet}`);
                
                // Simulate faucet request
                await new Promise(resolve => setTimeout(resolve, 2000));
                console.log('💰 Testnet funding requested (may take 1-2 minutes)');
                break;
                
            } catch (error) {
                console.log(`❌ Faucet ${faucet} failed:`, error.message);
            }
        }
    }

    /**
     * Display wallet information
     */
    displayWalletInfo(wallet) {
        console.log('\n📱 Wallet Information:');
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
        console.log(`Address: ${wallet.address}`);
        console.log(`Network: ${wallet.network}`);
        console.log(`Balance: ${wallet.balance} FIL`);
        console.log(`Status: ${wallet.isFunded ? '✅ Funded' : '⏳ Awaiting funds'}`);
        console.log(`Auto-generated: ${wallet.autoGenerated ? '✅ Yes' : '❌ No'}`);
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
    }
}

/**
 * Main initialization function
 */
async function initializeContainerWallet() {
    try {
        console.log('🚀 Starting automatic wallet initialization...');
        console.log('=' .repeat(50));

        const walletManager = new AutoWalletManager();
        const wallet = await walletManager.initializeWallet();
        
        walletManager.displayWalletInfo(wallet);
        
        console.log('\n✅ Wallet initialization complete!');
        console.log('🌐 System ready for blockchain operations');
        
        return wallet;

    } catch (error) {
        console.error('❌ Wallet initialization failed:', error);
        
        // Don't fail the container startup - continue with warnings
        console.log('⚠️  Continuing startup without wallet (can setup later)');
        return null;
    }
}

// Run initialization if called directly
if (require.main === module) {
    initializeContainerWallet()
        .then(() => {
            console.log('🎯 Container wallet initialization complete');
            process.exit(0);
        })
        .catch((error) => {
            console.error('💥 Fatal error:', error);
            process.exit(1);
        });
}

module.exports = { AutoWalletManager, initializeContainerWallet };
