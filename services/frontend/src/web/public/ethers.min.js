// Minimal ethers.js replacement for MetaMask integration
// This provides the basic functionality needed for our deal creation workflow

window.ethers = {
  providers: {
    Web3Provider: class Web3Provider {
      constructor(provider) {
        this.provider = provider;
      }
      
      getSigner() {
        return new ethers.Signer(this.provider);
      }
      
      async getNetwork() {
        try {
          const chainId = await this.provider.request({ method: 'eth_chainId' });
          const networkVersion = await this.provider.request({ method: 'net_version' });
          
          return {
            chainId: parseInt(chainId, 16),
            name: chainId === '0x4cb2f' ? 'filecoin-calibration' : 'unknown',
            networkVersion: networkVersion
          };
        } catch (error) {
          console.error('Failed to get network:', error);
          throw error;
        }
      }
    }
  },
  
  Signer: class Signer {
    constructor(provider) {
      this.provider = provider;
    }
    
    async getAddress() {
      try {
        const accounts = await this.provider.request({ method: 'eth_accounts' });
        return accounts[0];
      } catch (error) {
        console.error('Failed to get address:', error);
        throw error;
      }
    }
    
    async sendTransaction(transaction) {
      try {
        // Use MetaMask's eth_sendTransaction
        const txHash = await this.provider.request({
          method: 'eth_sendTransaction',
          params: [transaction]
        });
        
        return {
          hash: txHash,
          wait: async () => {
            // Simple wait implementation
            return new Promise((resolve) => {
              setTimeout(() => {
                resolve({
                  transactionHash: txHash,
                  status: 1
                });
              }, 2000);
            });
          }
        };
      } catch (error) {
        console.error('Transaction failed:', error);
        throw error;
      }
    }
  },
  
  utils: {
    formatEther: (wei) => {
      // Convert wei to ether (basic implementation)
      return (parseInt(wei) / Math.pow(10, 18)).toString();
    },
    
    formatUnits: (value, decimals) => {
      return (parseInt(value) / Math.pow(10, decimals || 18)).toString();
    }
  }
};

console.log('âœ… Minimal ethers.js loaded successfully');
